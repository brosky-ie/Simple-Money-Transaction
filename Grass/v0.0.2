// Version 0.0.2

// The text after // are just comments and are not part of the code.

// Import the Scanner class to allow user input from the keyboard
import java.util.Scanner;

// Main class where the program starts. The filename should match this class name.
public class PorkMenudo {

    // Main method - entry point of the program
    public static void main(String[] args) {

        // Scanner object to read user input (like typing numbers or text)
        Scanner input = new Scanner(System.in);

        // Use double to store money because it can hold decimal values (e.g., 10000.00)
        // double is preferred for currency calculations that need decimals
        double balance = 10000.00; 

        // int is used for whole numbers; here, choice stores user's menu option (1 to 4)
        // Integers are efficient and perfect for counting or selecting options
        int choice = 0;

        // int to count how many times the user has withdrawn money
        // Using int is simple and sufficient for counting
        int withdrawalCount = 0;

        // 'final' means this value never changes - constant for max withdrawals allowed
        // Using a constant improves code readability and prevents accidental changes
        final int MAX_WITHDRAWALS = 3;

        // Store the correct PIN as a String because PINs can have leading zeros or characters
        // String is better than int for PINs because they aren't used for math operations
        final String CORRECT_PIN = "1234";

        // int for counting login attempts - whole numbers are natural choice for counts
        int attempts = 3;

        // boolean is perfect for true/false values
        // Here, tracks if the user has logged in successfully or not
        boolean loggedIn = false;

        // Loop runs while there are attempts left for entering PIN
        while (attempts > 0) {
            System.out.print("Enter your PIN: "); // Prompt user
            String enteredPin = input.nextLine(); // Read PIN input as String

            if (enteredPin.equals(CORRECT_PIN)) { // Check if entered PIN matches
                loggedIn = true; // Set loggedIn to true to indicate success
                System.out.println("PIN accepted. Welcome!");
                break; // Exit the loop as user is authenticated
            } else {
                attempts--; // Decrement attempts left by 1
                System.out.println("Incorrect PIN. Attempts left: " + attempts);
            }
        }

        // If user fails to log in (loggedIn is still false), end the program
        if (!loggedIn) {
            System.out.println("Too many incorrect attempts. Exiting...");
            input.close(); // Close the scanner to free resources
            System.exit(0); // Exit the program immediately
        }

        // Main menu loop - keeps showing options until user chooses to exit
        do {
            // Display menu options
            System.out.println("\n===== Menudo Express =====");
            System.out.println("1. Check Balance");
            System.out.println("2. Withdraw");
            System.out.println("3. Deposit");
            System.out.println("4. Exit");
            System.out.print("Enter your choice (1-4): ");

            // Read the user's choice as a String first
            String userInput = input.nextLine();

            try {
                // Convert the user's input to an int (throws exception if invalid)
                choice = Integer.parseInt(userInput);
            } catch (NumberFormatException e) {
                // If input is not a number, show error and restart loop
                System.out.println("Please enter a number from 1 to 4.");
                continue; // Skip the rest and ask again
            }

            // Use switch-case to handle different menu choices efficiently
            switch (choice) {

                case 1:
                    // Show current balance
                    System.out.println("Balance: " + balance);
                    break;

                case 2:
                    // Check if user reached max withdrawals (using int counter)
                    if (withdrawalCount >= MAX_WITHDRAWALS) {
                        System.out.println("Withdrawal limit reached.");
                        break;
                    }

                    // Check minimum balance rule; if balance is exactly 500, no withdrawal allowed
                    if (balance == 500) {    
                        System.out.println("Cannot withdraw. Minimum balance of 500 must be maintained.");
                        break;
                    }

                    // Loop until user enters a valid amount to withdraw
                    while (true) {
                        System.out.print("Withdraw amount: ");
                        String withdrawInput = input.nextLine();

                        try {
                            // Convert withdrawal input to double for decimal amounts
                            double amount = Double.parseDouble(withdrawInput);

                            // Validate amount is positive
                            if (amount <= 0) {
                                System.out.println("Amount must be more than 0.");
                            } 
                            // Check if enough balance to withdraw
                            else if (amount > balance) {
                                System.out.println("Not enough balance.");
                            } 
                            // Ensure balance after withdrawal is not less than minimum required (500)
                            else if ((balance - amount) < 500) {
                                System.out.println("Cannot withdraw. Minimum balance of 500 must be maintained.");
                            } else {
                                // Successful withdrawal: subtract amount from balance
                                balance -= amount;
                                withdrawalCount++; // Increment withdrawal count (int counter)
                                System.out.println("Withdrawn: " + amount);
                                System.out.println("New balance: " + balance);
                                break; // Exit withdrawal input loop
                            }
                        } catch (NumberFormatException e) {
                            // Handle invalid input that can't be converted to double
                            System.out.println("Enter a valid number.");
                        }
                    }
                    break;

                case 3:
                    // Loop until user enters a valid deposit amount
                    while (true) {
                        System.out.print("Deposit amount: ");
                        String depositInput = input.nextLine();

                        try {
                            // Convert deposit amount to double to allow decimal values
                            double amount = Double.parseDouble(depositInput);

                            if (amount <= 0) {
                                System.out.println("Amount must be more than 0.");
                            } else {
                                // Add deposited amount to balance
                                balance += amount;
                                System.out.println("Deposited: " + amount);
                                System.out.println("New balance: " + balance);
                                break; // Exit deposit input loop
                            }
                        } catch (NumberFormatException e) {
                            // Handle invalid number input
                            System.out.println("Enter a valid number.");
                        }
                    }
                    break;

                case 4:
                    // Exit option: say goodbye
                    System.out.println("Thank you!");
                    System.out.println("Have a great day!");
                    break;

                default:
                    // If user input is not between 1 and 4, prompt again
                    System.out.println("Choice must be between 1 and 4.");
            }

        } while (choice != 4); // Repeat menu until user chooses to exit

        // Close Scanner object to prevent resource leak
        input.close();
    }
}
